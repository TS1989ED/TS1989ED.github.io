<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo使用中遇到的小问题]]></title>
    <url>%2F2018%2F09%2F04%2FProblemsInHexo%2F</url>
    <content type="text"><![CDATA[标签和分类失败在设置tags和categories时，- Hexo中间要加上空格 版权信息总是显示为yoursite.com将hero/_config.yml中的url的·yoursite更改即可 本地效果和发布效果不一致Mac用Command+Shift+R对Chrome强制刷新，短则几秒多则几分钟效果就更新了 hexo s的一次报错在一次错误地修改了.js文件后，hexo server报错，报错内容指向highlight.js文件，解决方法：修改站点配置文件中的auto_detect为false 左边标题栏1～8##`大标题显示正常，后面显示为无序列表##大标题只能显示八个，暂未作出修改，但是改为###问题就解决了 关闭特定页面的Valine评论系统在hexo/source中的指定页面或文章的front-matter中加入： comments: false]]></content>
      <categories>
        <category>inbox</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo进阶]]></title>
    <url>%2F2018%2F09%2F04%2FAdvancedOperationInHexo%2F</url>
    <content type="text"><![CDATA[目录结构12345678910111213141516171819202122232425262728293031323334353637├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道 修改文章页宽打开\themes\next\source\css\ _variables\base.styl文件，找到以下字段并修改为合适的宽度: 1content-desktop-large = 1000px 修改小型代码块颜色修改\themes\next\source\css\ _variables\base.styl文件，修改代码加入自定义颜色： 123456789$black-deep = #222$red = #ff2a2a$blue-bright = #87daff$blue = #0684bd$blue-deep = #262a30$orange = #fc6423// 下面是我自定义的颜色$my-code-foreground = #dd0055 // 用``围出的代码块字体颜色$my-code-background = #eee // 用``围出的代码块背景颜色 修改$code-background和$code-foreground的值 123456// Code &amp; Code Blocks // 用``围出的代码块 // -------------------------------------------------- $code-font-family = $font-family-monospace $code-font-size = 15px $code-background = $my-code-background $code-foreground = $my-code-foreground $code-border-radius = 4px 添加文章结束标记同样在themes/next/layout/_macro/post.swig 中，在 wechat-subscriber.swig之前添加如下代码： 1&lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;---------------- The End ----------------&lt;/div&gt; 把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果修改themes\next\source\css\_common\components\sidebar\sidebar-author.styl： 1234567891011121314151617181920212223242526272829.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: site-author-image-border-color; /* start*/ border-radius: 50% webkit-transition: 1.4s all; moz-transition: 1.4s all; ms-transition: 1.4s all; transition: 1.4s all; /* end */&#125;/* start */.site-author-image:hover &#123; background-color: #55DAE1; webkit-transform: rotate(360deg) scale(1.1); moz-transform: rotate(360deg) scale(1.1); ms-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1);&#125;/* end */ 修改链接文字样式打开themes\next\source\css\_common\components\post\post.styl添加以下代码，给链接添加颜色： 12345678.post-body p a&#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #ff106c; text-decoration: underline; &#125;&#125; 为next主题的主页文章添加阴影效果打开themes/next/source/css/_custom/custom.styl文件添加： 1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 为next主题添加nest背景特效背景几何线条是采用的nest效果，一个基于html5 canvas绘制的网页背景效果，非常赞！来自github的开源项目canvas-nest 特性 不依赖任何框架或者内库，比如不依赖 非常小，只有1.66kb 非常容易实现，配置简单，即使不是web的开发者，也能简单搞定 配置选项 color: 线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B)，注意用,分割 opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 不足：CPU占用过高 修改_layout.swig打开next/layout/_layout.swig在&lt;/body&gt;之前添加如下代码 可参考官方文档：Canvas-Nest 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 修改主题配置文件打开/next/_config.yml，添加如下代码 1234567# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true 运行hexo clean 和 hero g -d 之后就可以在网页上看到效果了。 隐藏网页底部powered by hexo/强力驱动打开hexo/themes/next/layout/_partials/footer.swig 找到下面这段代码，用第一行和最后一行注释掉即可 123456789101112131415&lt;!--&lt;div class="powered-by"&gt;&#123;# #&#125;&#123;&#123; __('footer.powered', '') &#125;&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125;&#123;% if theme.footer.theme.enable %&#125; &lt;div class="theme-info"&gt; &#123;&#123; __('footer.theme') &#125;&#125; &lt;/div&gt;--&gt; 侧栏加入已运行时间themes/next/layout/_custom中添加sidebar.swig文件: 1234567891011121314151617181920212223242526&lt;div id="days"&gt;&lt;/div&gt; &lt;script&gt; function show_date_time()&#123; window.setTimeout("show_date_time()", 1000); BirthDay=new Date("01/10/2017 12:34:56"); today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById('days').innerHTML="已运行"+daysold+"天"+hrsold+"小时"+minsold+"分"+seconds+"秒"; &#125;function setzero(i)&#123; if (i&lt;10) &#123;i="0" + i&#125;; return i;&#125;show_date_time();&lt;/script&gt; 在themes/next/layout/_macro/sidebar.swig中的&lt;/section&gt;之前添加: 1&#123;% include &apos;../_custom/sidebar.swig&apos; %&#125; 设置时间样式： 1234567// 自定义的侧栏时间样式#days &#123; display: block; color: #fffa74; font-size: 14px; margin-top: 15px;&#125; 更改tagcloud为彩色themes/next/layout/page.swig找到tagcloud并替换: 1&#123;&#123; tagcloud(&#123;min_font: 13, max_font: 31, amount: 1000, color: true, start_color: '#9733EE', end_color: '#FF512F'&#125;) &#125;&#125; 设置动态titlethemes/next/source/js/src下创建dytitle.js： 12345678910111213141516var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="shortcut icon"]').attr('href', "/TEP.png"); document.title = 'w(ﾟДﾟ)w 出BUG啦！！！！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="shortcut icon"]').attr('href', "/favicon.png"); document.title = '♪(^∇^*)又好了。。。 ' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125;&#125;); 修改themes/next/layout/layout.swing,在 &lt;/body&gt; 之前添加: 1&lt;script type="text/javascript" src="/js/src/dytitle.js"&gt;&lt;/script&gt; 修改文章底部带#的标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 文字样式先在themes/next/source/css/_custom/custom.styl中添加以下样式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221// 下载样式a#download &#123;display: inline-block;padding: 0 10px;color: #000;background: transparent;border: 2px solid #000;border-radius: 2px;transition: all .5s ease;font-weight: bold;&amp;:hover &#123;background: #000;color: #fff;&#125;&#125;/ /颜色块-黄span#inline-yellow &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #f0ad4e;&#125;// 颜色块-绿span#inline-green &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #5cb85c;&#125;// 颜色块-蓝span#inline-blue &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #2780e3;&#125;// 颜色块-紫span#inline-purple &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #9954bb;&#125;// 左侧边框红色块级p#div-border-left-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #df3e3e;&#125;// 左侧边框黄色块级p#div-border-left-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #f0ad4e;&#125;// 左侧边框绿色块级p#div-border-left-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #5cb85c;&#125;// 左侧边框蓝色块级p#div-border-left-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #2780e3;&#125;// 左侧边框紫色块级p#div-border-left-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #9954bb;&#125;// 右侧边框红色块级p#div-border-right-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #df3e3e;&#125;// 右侧边框黄色块级p#div-border-right-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #f0ad4e;&#125;// 右侧边框绿色块级p#div-border-right-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #5cb85c;&#125;// 右侧边框蓝色块级p#div-border-right-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #2780e3;&#125;// 右侧边框紫色块级p#div-border-right-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #9954bb;&#125;// 上侧边框红色p#div-border-top-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #df3e3e;&#125;// 上侧边框黄色p#div-border-top-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #f0ad4e;&#125;// 上侧边框绿色p#div-border-top-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #5cb85c;&#125;// 上侧边框蓝色p#div-border-top-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #2780e3;&#125;// 上侧边框紫色p#div-border-top-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #9954bb;&#125; 用法如下： 12&lt;span id=&quot;inline-blue&quot;&gt;站点配置文件&lt;/span&gt;， &lt;span id=&quot;inline-purple&quot;&gt;主题配置文件&lt;/span&gt; 站点配置文件，主题配置文件 12&lt;p id="div-border-left-red"&gt;左边红色&lt;/p&gt;&lt;p id="div-border-top-blue"&gt;上边蓝色&lt;/p&gt; 左边红色上边蓝色 在文档中增加图标采用的是Font Awesome的图标。 给文档加密打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在开头的四个meta之后插入以下代码：1234567891011121314&lt;script&gt; (function () &#123; if ('&#123;&#123; page.password &#125;&#125;') &#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;') &#123; alert('密码错误！'); if (history.length === 1) &#123; location.replace("http://xxxxxxx.xxx"); // 这里替换成你的首页 &#125; else &#123; history.back(); &#125; &#125; &#125; &#125;)();&lt;/script&gt; 然后在MD文章头文件中加入 password: password 侧边栏推荐阅读打开主题配置文件修改成这样就行了（links里面写你想要推荐的链接）：1234567891011# Blogrollslinks_title: 推荐阅读#links_layout: blocklinks_layout: inlinelinks: 优设: http://www.uisdc.com/ 张鑫旭: http://www.zhangxinxu.com/ Web前端导航: http://www.alloyteam.com/nav/ 前端书籍资料: http://www.36zhen.com/t?id=3448 百度前端技术学院: http://ife.baidu.com/ google前端开发基础: http://wf.uisdc.com/cn/ 新增评论系统去除评论系统下方的powered by valine打开/next/layout/_third-party/comments/valine.swig文件，123456789101112131415161718new Valine(&#123; el: '#comments' , verify: &#123;&#123; theme.valine.verify &#125;&#125;, notify: &#123;&#123; theme.valine.notify &#125;&#125;, appId: '&#123;&#123; theme.valine.appid &#125;&#125;', appKey: '&#123;&#123; theme.valine.appkey &#125;&#125;', placeholder: '&#123;&#123; theme.valine.placeholder &#125;&#125;', avatar:'&#123;&#123; theme.valine.avatar &#125;&#125;', guest_info:guest, pageSize:'&#123;&#123; theme.valine.pageSize &#125;&#125;' || 10,&#125;);//新增以下代码即可，可以移除.info下所有子节点。var infoEle = document.querySelector('#comments .info');if (infoEle &amp;&amp; infoEle.childNodes &amp;&amp; infoEle.childNodes.length &gt; 0)&#123; infoEle.childNodes.forEach(function(item) &#123; item.parentNode.removeChild(item); &#125;);&#125;]]></content>
      <categories>
        <category>inbox</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello-World]]></title>
    <url>%2F2018%2F08%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[会话跟踪什么是会话跟踪 一个会话从打开浏览器开始到关闭浏览器结束，这个过程中访问某个域名的所有操作称之为会话 会话（Session）是浏览器与服务器之间的一次连续的通讯过程 HTTP协议是无状态的，也就是说，一次请求结束后，HTTP协议就不再记录相关信息 实际应用中常常需要记住一些状态信息：登陆令牌（Token）现行常用的会话跟踪技术 URL方式，需要保存的信息直接追加到URL后 隐藏域方式：可以使用表单中的隐藏域保存相关信息 Cookie方式：将状态信息保存到客户端，服务器能够获取相关信息进行分析，从而生成对客户端的响应，例如简化登陆功能就能使用Cookie实现 Session方式：将状态信息保存到服务器的会话对象中，通过唯一标记的ID值域客户端进行绑定使用，例如访问控制功能就可以使用Session实现 CookieCookie的功能和特点 Cookie是一段保存在客户端的小文本；能够用来将用户活动过程中的状态信息保存到客户端，服务器可以获得该信息以便进行处理，跟踪到用户的状态 Cookie的域及最大生命时间 name：cookie的名字，每个cookie都有一个名字 content：cookie的值，与名字一起作为键值对形式存在 domain：域，该cookie的域名，例如左图中是csdn.net，说明当前cookie来自csdn.net path：路径，访问csdn.net下该路径时，当前cookie将被发送 created：cookie被创建的时间 Expired：cookie失效的时间 最大生命时间：失效时间和创建时间的时间差，就是cookie的最大生命时间，超过该时间，cookie将失效，不再被发送到相应的域地址 在Servlet中创建Cookie、设置Cookie属性 Servlet规范中定了Cookie类，创建该类对象就可以创建Cookie，并可以调用其中方法为Cookie设置属性 方法声明 方法描述 Cookie(java.lang.String name,java.lang.String value) 创建Cookie对象，指定名字和对应的值 void setMaxAge(int expiry) 设置最大生命时间，如果不设置当浏览器关闭时，cookie失效 void setValue(java.lang.String newValue) 设置Cookie的值 setDomain(java.lang.String domain) 设置Cookie的域名 Servlet规范中定了Cookie，创建该类对象就可以创建Cookie，并可以调用其中的方法为Cookie设置属性 在响应中设置Cookie信息 要将Cookie保存到客户端，就要将其添加到响应对象才可以 要将Cookie保存到客户端，就要通过响应对象 在浏览器中访问TestCookieServlet，可以查看到localhost保存了两个Cookie信息到客户端 响应端口中定义了设置Cookie的方法 方法声明 方法描述 void addCookie(Cookie cookie) 将Cookie对象保存到相应的响应对象中 [TOC] 会话跟踪概述什么是会话跟踪 一个会话从打开浏览器开始到关闭浏览器结束，这个过程中访问某个域名的所有操作称之为会话 会话（Session）是浏览器与服务器之间的一次连续的通讯过程 HTTP协议是无状态的，也就是说，一次请求结束后，HTTP协议就不再记录相关信息 实际应用中常常需要记住一些状态信息：登陆令牌（Token）现行常用的会话跟踪技术 URL方式，需要保存的信息直接追加到URL后 隐藏域方式：可以使用表单中的隐藏域保存相关信息 Cookie方式：将状态信息保存到客户端，服务器能够获取相关信息进行分析，从而生成对客户端的响应，例如简化登陆功能就能使用Cookie实现 Session方式：将状态信息保存到服务器的会话对象中，通过唯一标记的ID值域客户端进行绑定使用，例如访问控制功能就可以使用Session实现 CookieCookie的功能和特点 Cookie是一段保存在客户端的小文本；能够用来将用户活动过程中的状态信息保存到客户端，服务器可以获得该信息以便进行处理，跟踪到用户的状态 Cookie的域及最大生命时间 name：cookie的名字，每个cookie都有一个名字 content：cookie的值，与名字一起作为键值对形式存在 domain：域，该cookie的域名，例如左图中是csdn.net，说明当前cookie来自csdn.net path：路径，访问csdn.net下该路径时，当前cookie将被发送 created：cookie被创建的时间 Expired：cookie失效的时间 最大生命时间：失效时间和创建时间的时间差，就是cookie的最大生命时间，超过该时间，cookie将失效，不再被发送到相应的域地址 在Servlet中创建Cookie、设置Cookie属性 Servlet规范中定了Cookie类，创建该类对象就可以创建Cookie，并可以调用其中方法为Cookie设置属性 方法声明 方法描述 Cookie(java.lang.String name,java.lang.String value) 创建Cookie对象，指定名字和对应的值 void setMaxAge(int expiry) 设置最大生命时间，如果不设置当浏览器关闭时，cookie失效 void setValue(java.lang.String newValue) 设置Cookie的值 setDomain(java.lang.String domain) 设置Cookie的域名 Servlet规范中定了Cookie，创建该类对象就可以创建Cookie，并可以调用其中的方法为Cookie设置属性 在响应中设置Cookie信息 要将Cookie保存到客户端，就要将其添加到响应对象才可以 要将Cookie保存到客户端，就要通过响应对象 在浏览器中访问TestCookieServlet，可以查看到localhost保存了两个Cookie信息到客户端 响应端口中定义了设置Cookie的方法 方法声明 方法描述 void addCookie(Cookie cookie) 将Cookie对象保存到相应的响应对象中 [TOC] 会话跟踪概述什么是会话跟踪 一个会话从打开浏览器开始到关闭浏览器结束，这个过程中访问某个域名的所有操作称之为会话 会话（Session）是浏览器与服务器之间的一次连续的通讯过程 HTTP协议是无状态的，也就是说，一次请求结束后，HTTP协议就不再记录相关信息 实际应用中常常需要记住一些状态信息：登陆令牌（Token）现行常用的会话跟踪技术 URL方式，需要保存的信息直接追加到URL后 隐藏域方式：可以使用表单中的隐藏域保存相关信息 Cookie方式：将状态信息保存到客户端，服务器能够获取相关信息进行分析，从而生成对客户端的响应，例如简化登陆功能就能使用Cookie实现 Session方式：将状态信息保存到服务器的会话对象中，通过唯一标记的ID值域客户端进行绑定使用，例如访问控制功能就可以使用Session实现 CookieCookie的功能和特点 Cookie是一段保存在客户端的小文本；能够用来将用户活动过程中的状态信息保存到客户端，服务器可以获得该信息以便进行处理，跟踪到用户的状态 Cookie的域及最大生命时间 name：cookie的名字，每个cookie都有一个名字 content：cookie的值，与名字一起作为键值对形式存在 domain：域，该cookie的域名，例如左图中是csdn.net，说明当前cookie来自csdn.net path：路径，访问csdn.net下该路径时，当前cookie将被发送 created：cookie被创建的时间 Expired：cookie失效的时间 最大生命时间：失效时间和创建时间的时间差，就是cookie的最大生命时间，超过该时间，cookie将失效，不再被发送到相应的域地址 在Servlet中创建Cookie、设置Cookie属性 Servlet规范中定了Cookie类，创建该类对象就可以创建Cookie，并可以调用其中方法为Cookie设置属性 方法声明 方法描述 Cookie(java.lang.String name,java.lang.String value) 创建Cookie对象，指定名字和对应的值 void setMaxAge(int expiry) 设置最大生命时间，如果不设置当浏览器关闭时，cookie失效 void setValue(java.lang.String newValue) 设置Cookie的值 setDomain(java.lang.String domain) 设置Cookie的域名 Servlet规范中定了Cookie，创建该类对象就可以创建Cookie，并可以调用其中的方法为Cookie设置属性 在响应中设置Cookie信息 要将Cookie保存到客户端，就要将其添加到响应对象才可以 要将Cookie保存到客户端，就要通过响应对象 在浏览器中访问TestCookieServlet，可以查看到localhost保存了两个Cookie信息到客户端 响应端口中定义了设置Cookie的方法 方法声明 方法描述 void addCookie(Cookie cookie) 将Cookie对象保存到相应的响应对象中 [TOC] 会话跟踪概述什么是会话跟踪 一个会话从打开浏览器开始到关闭浏览器结束，这个过程中访问某个域名的所有操作称之为会话 会话（Session）是浏览器与服务器之间的一次连续的通讯过程 HTTP协议是无状态的，也就是说，一次请求结束后，HTTP协议就不再记录相关信息 实际应用中常常需要记住一些状态信息：登陆令牌（Token）现行常用的会话跟踪技术 URL方式，需要保存的信息直接追加到URL后 隐藏域方式：可以使用表单中的隐藏域保存相关信息 Cookie方式：将状态信息保存到客户端，服务器能够获取相关信息进行分析，从而生成对客户端的响应，例如简化登陆功能就能使用Cookie实现 Session方式：将状态信息保存到服务器的会话对象中，通过唯一标记的ID值域客户端进行绑定使用，例如访问控制功能就可以使用Session实现 CookieCookie的功能和特点 Cookie是一段保存在客户端的小文本；能够用来将用户活动过程中的状态信息保存到客户端，服务器可以获得该信息以便进行处理，跟踪到用户的状态 Cookie的域及最大生命时间 name：cookie的名字，每个cookie都有一个名字 content：cookie的值，与名字一起作为键值对形式存在 domain：域，该cookie的域名，例如左图中是csdn.net，说明当前cookie来自csdn.net path：路径，访问csdn.net下该路径时，当前cookie将被发送 created：cookie被创建的时间 Expired：cookie失效的时间 最大生命时间：失效时间和创建时间的时间差，就是cookie的最大生命时间，超过该时间，cookie将失效，不再被发送到相应的域地址 在Servlet中创建Cookie、设置Cookie属性 Servlet规范中定了Cookie类，创建该类对象就可以创建Cookie，并可以调用其中方法为Cookie设置属性 方法声明 方法描述 Cookie(java.lang.String name,java.lang.String value) 创建Cookie对象，指定名字和对应的值 void setMaxAge(int expiry) 设置最大生命时间，如果不设置当浏览器关闭时，cookie失效 void setValue(java.lang.String newValue) 设置Cookie的值 setDomain(java.lang.String domain) 设置Cookie的域名 Servlet规范中定了Cookie，创建该类对象就可以创建Cookie，并可以调用其中的方法为Cookie设置属性 在响应中设置Cookie信息 要将Cookie保存到客户端，就要将其添加到响应对象才可以 要将Cookie保存到客户端，就要通过响应对象 在浏览器中访问TestCookieServlet，可以查看到localhost保存了两个Cookie信息到客户端 响应端口中定义了设置Cookie的方法 方法声明 方法描述 void addCookie(Cookie cookie) 将Cookie对象保存到相应的响应对象中]]></content>
      <categories>
        <category>inbox</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
</search>
